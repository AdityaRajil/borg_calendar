/*
This file is part of BORG.
 
    BORG is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
 
    BORG is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with BORG; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
Copyright 2003 by Mike Berger
 */
// reads an XML schema file and generates a class to represent
// a data object for the schema (subclass of KeyedBean)
// and a class to convert between the object and mdb.Row (FileBeanAdapter)
package net.sf.borg.model.db.generate;
import java.io.FileWriter;

import net.sf.borg.common.util.XTree;

class GenerateDataObjects
{
    
    public static void main( String args[] ) throws Exception
    {
        String pack = "";
	String file = null;
        if( args.length == 1 )
	{
            file = args[0];
	}
	else if( args.length == 2 )
	{
		pack = args[0];
		file = args[1];
	}
	else
	{
		throw new Exception("Usage: genObj [package] schemafile");
	}
        
        XTree xt = XTree.readFromFile(file);
        XTree objname = xt.child("name");
        if( !objname.exists() )
            throw new Exception("Could not read object name" );
        String objName = objname.value();
        
        FileWriter fw = new FileWriter(objname.value() + ".java" );
        fw.write("// This code was generated by GenerateDataObjects\n");
        if( pack != null )
            fw.write("package " + pack + ";\n\n" );
        //fw.write("\nimport java.util.*;\nimport net.sf.borg.model.db.KeyedBean;\n\n");
        fw.write("\nimport net.sf.borg.model.db.KeyedBean;\n\n");
        fw.write("public class " + objName + " extends KeyedBean implements java.io.Serializable {\n" );
  
        for( int i = 1;; i++ )
        {
            XTree field = xt.child("field",i);
            if( !field.exists()  )
                break;
            
            String longName = null;
            
            XTree longname = field.child("longName");
            if( longname.exists() )
                   longName = longname.value();
            
            if( !longname.exists() )
            {
        	XTree name = field.child("name");
                if( name.exists() )
                       longName = name.value();
            }   
              
            if( longName == null )
        	throw new Exception("Cannot parse Schema XML - field found with no name or longname");
            
            
            XTree type = field.child("type");
            if( !type.exists() )
                throw new Exception("Cannot parse Schema XML - field " + longname.value() + " found with no type");
            String fieldType = type.value();
            
                        
            if( fieldType.equals( "StringVector" ))
                fieldType = "java.util.Vector";
            else if( fieldType.equals("Date"))
        	fieldType = "java.util.Date";

            
            fw.write( "\n\tprivate " + fieldType + " " + longName + "_;\n" );
            fw.write( "\tpublic " + fieldType + " get" + longName + "() { return( " + longName + "_ ); }\n" );
            fw.write( "\tpublic void set" + longName + "( " + fieldType + " xx ){ " + longName + "_ = xx; }\n");
            
        }
        
        fw.write("\n\tprotected Object clone() {\n" );
        fw.write("\t\t" + objName + " dst = new " + objName + "();\n" );
        fw.write("\t\tdst.setKey( getKey());\n" );
        for( int i = 1;; i++ )
        {
            XTree field = xt.child("field",i);
            if( !field.exists()  )
                break;
            
            XTree name = field.child("name");
            
            //XTree type = field.child("type");

            String longName = name.value();
            
            XTree longname = field.child("longName");
            if( longname.exists() )
                   longName = longname.value();
                        
            fw.write( "\t\tdst.set" + longName + "( get" + longName + "() );\n" );            
        }     
        fw.write("\t\treturn(dst);\n");
        fw.write("\t}\n");
        
        fw.write("}\n");
        fw.close();
        
        /* ************************************************************************** */
        
        
        fw = new FileWriter(objname.value() + "Adapter.java" );
        fw.write("// This code was generated by GenerateDataObjects\n");
        if( pack != null )
            fw.write("package " + pack + ".db.file;\n\n" );
        fw.write("import net.sf.borg.model.db.file.mdb.*;\n" );
        fw.write("import net.sf.borg.model.db.*;\n");
        fw.write("import net.sf.borg.model." + objName + ";\n");
        fw.write("public class " + objName + "Adapter implements FileBeanAdapter {\n" );
        fw.write("\n\tpublic KeyedBean fromRow( Row r ) throws Exception\n\t{\n");
        fw.write("\t\t" + objName + " ret = new " + objName + "();\n" );
        fw.write("\t\tret.setKey(r.getKey());\n" );
        for( int i = 1;; i++ )
        {
            XTree field = xt.child("field",i);
            if( !field.exists()  )
                break;
            
            XTree name = field.child("name");
            String fieldName = name.value();
            
            XTree type = field.child("type");

            String fieldType = type.value();
            String longName = name.value();
            
            XTree longname = field.child("longName");
            if( longname.exists() )
                   longName = longname.value();
              
            if( fieldType.equals("boolean") )
            {
                XTree fnum = field.child("flagNumber");
                String flagnum = fnum.value();
                fw.write("\t\tret.set" + longName + "( r.getFlag(" + flagnum + "));\n" );     
            }
            else
            {
                fw.write("\t\tret.set" + longName + "( r.get" + fieldType + "(\"" + fieldName + "\"));\n" ); 
            }
        }
        fw.write("\t\treturn( ret );\n\t}\n" );
        
        fw.write("\n\tpublic Row toRow( Schema sch, KeyedBean b, boolean normalize ) throws Exception\n\t{\n");
        fw.write("\t\t" + objName + " o = (" + objName + ") b;\n" );
        fw.write("\t\tRow ret = new Row(sch);\n" );
        fw.write("\t\tret.normalize(normalize);\n" );
        fw.write("\t\tret.setKey(o.getKey());\n" );
        for( int i = 1;; i++ )
        {
            XTree field = xt.child("field",i);
            if( !field.exists()  )
                break;
            
            XTree name = field.child("name");
            String fieldName = name.value();
            
            XTree type = field.child("type");

            String fieldType = type.value();
            String longName = name.value();
            
            XTree longname = field.child("longName");
            if( longname.exists() )
                   longName = longname.value();
                        
            if( fieldType.equals( "StringVector" ))
                fieldType = "Vector";
             
            if( fieldType.equals("boolean") )
            {
                XTree fnum = field.child("flagNumber");
                String flagnum = fnum.value();
                fw.write("\t\tret.setFlag(" + flagnum + ",  o.get" + longName + "());\n" );     
            }
            else
            {
                fw.write("\t\tret.setField(\"" + fieldName + "\", o.get" + longName + "());\n" ); 
            }          

        }
        fw.write("\t\treturn( ret );\n\t}\n" );
        
        fw.write("\n\tpublic KeyedBean newBean() {\n" );
        fw.write("\t\treturn( new " + objName + "());\n" );
        fw.write("\t}\n");
        
        
        fw.write("}\n");
        fw.close();
        
        
        /*******************************************************************/
        
        fw = new FileWriter(objname.value() + "XMLAdapter.java" );
        fw.write("// This code was generated by GenerateDataObjects\n");
        if( pack != null )
            fw.write("package " + pack + ";\n\n" );
        fw.write("import net.sf.borg.model.db.*;\n");
        fw.write("import net.sf.borg.model." + objName + ";\n");
        fw.write("import net.sf.borg.common.util.XTree;\n" );
        fw.write("public class " + objName + "XMLAdapter extends BeanXMLAdapter {\n" );
 
        // to XML
        fw.write("\n\tpublic XTree toXml( KeyedBean b )\n\t{\n");
        fw.write("\t\t" + objName + " o = (" + objName + ") b;\n" );
        fw.write("\t\tXTree xt = new XTree();\n" );
        fw.write("\t\txt.name(\"" + objName + "\");\n");
        fw.write("\t\txt.appendChild(\"KEY\", Integer.toString(o.getKey()));\n" );
        for( int i = 1;; i++ )
        {
            XTree field = xt.child("field",i);
            if( !field.exists()  )
                break;
            
            XTree name = field.child("name");

            
            XTree type = field.child("type");

            String fieldType = type.value();
            String longName = name.value();
            
            XTree longname = field.child("longName");
            if( longname.exists() )
                   longName = longname.value();
                        
            if( fieldType.equals( "StringVector" ))
                fieldType = "Vector";
            
            if( fieldType.equals("boolean") )
            {
                fw.write("\t\tif( o.get" + longName + "() == true )\n" );
                fw.write("\t\t\txt.appendChild(\"" + longName + "\" ,  BeanXMLAdapter.toString(o.get" + longName + "()));\n" );     
            }
            else if( fieldType.equals("String") )
            {
                fw.write("\t\tif( o.get" + longName + "() != null && !o.get" + longName + "().equals(\"\"))\n" );
                fw.write("\t\t\txt.appendChild(\"" + longName + "\", o.get" + longName + "());\n" ); 
            }
            else
            {
                fw.write("\t\tif( o.get" + longName + "() != null )\n" );
                fw.write("\t\t\txt.appendChild(\"" + longName + "\", BeanXMLAdapter.toString(o.get" + longName + "()));\n" ); 
            }

        }
        fw.write("\t\treturn( xt );\n\t}\n" );
        
        fw.write("\n\tpublic KeyedBean fromXml( XTree xt )\n\t{\n");
        fw.write("\t\t" + objName + " ret = new " + objName + "();\n" );
        
        fw.write("\t\tString ks = xt.child(\"KEY\").value();\n" );
        fw.write("\t\tret.setKey( BeanXMLAdapter.toInt(ks) );\n" );
        fw.write("\t\tString val = \"\";\n" );
        for( int i = 1;; i++ )
        {
            XTree field = xt.child("field",i);
            if( !field.exists()  )
                break;
            
            XTree name = field.child("name");
 
            
            XTree type = field.child("type");

            String fieldType = type.value();
            String longName = name.value();
            
            XTree longname = field.child("longName");
            if( longname.exists() )
                   longName = longname.value();
              
            if( fieldType.equals( "StringVector" ))
                fieldType = "Vector";
            
            fw.write("\t\tval = xt.child(\"" + longName + "\").value();\n" );
            if( fieldType.equals("boolean") )
            {
                fw.write("\t\tret.set" + longName + "( BeanXMLAdapter.toBoolean(val) );\n" );
            }
            else if( fieldType.equals("String") )
            {
                fw.write("\t\tif( !val.equals(\"\") )\n" );
                fw.write("\t\t\tret.set" + longName + "( val );\n" );
            }
            else if( fieldType.equals("Vector" ))
            {
                fw.write("\t\tret.set" + longName + "( BeanXMLAdapter.toVector(val) );\n" );
            }
            else if( fieldType.equals("Integer" ))
            {
                fw.write("\t\tret.set" + longName + "( BeanXMLAdapter.toInteger(val) );\n" ); 
            }
            else if( fieldType.equals("Date" ))
            {
                fw.write("\t\tret.set" + longName + "( BeanXMLAdapter.toDate(val) );\n" ); 
            }
        }
        fw.write("\t\treturn( ret );\n\t}\n" );
        
        fw.write("}\n");
        fw.close();
   
        
        
        
    }
    
    
}
