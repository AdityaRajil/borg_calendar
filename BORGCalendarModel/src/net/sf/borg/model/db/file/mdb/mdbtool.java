/*
This file is part of BORG.
    BORG is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    BORG is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with BORG; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
Copyright 2003 by Mike Berger
 */
package net.sf.borg.model.db.file.mdb;
/*
 * mdbtool.java
 *
 * Created on December 13, 2001, 9:54 PM
 */
/**
 *
 * @author  mberger
 */
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

import net.sf.borg.model.db.DBException;

public class mdbtool extends javax.swing.JFrame
{

    /** Creates new form mdbtool */
    public mdbtool()
    {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        scan = new javax.swing.JButton();
        View = new javax.swing.JButton();
        imp = new javax.swing.JButton();
        exp = new javax.swing.JButton();
        lock = new javax.swing.JButton();
        unlock = new javax.swing.JToggleButton();

        convert = new javax.swing.JButton();
        repair = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.FlowLayout());

        setTitle("MDBTOOL");
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                exitForm(evt);
            }
        });

        scan.setText("Scan");
        scan.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                scanActionPerformed(evt);
            }
        });

        getContentPane().add(scan);

        View.setText("View");
        View.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ViewActionPerformed(evt);
            }
        });

        getContentPane().add(View);

        imp.setText("Import");
        imp.setEnabled(false);
        imp.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                impActionPerformed(evt);
            }
        });

        getContentPane().add(imp);

        exp.setText("Export");
        exp.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                expActionPerformed(evt);
            }
        });

        getContentPane().add(exp);

        lock.setText("Lock");
        lock.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                lockActionPerformed(evt);
            }
        });

        getContentPane().add(lock);

        unlock.setText("Unlock");
        unlock.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                unlockActionPerformed(evt);
            }
        });

        getContentPane().add(unlock);

        convert.setText("Convert Dates");
        convert.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                convertActionPerformed(evt);
            }
        });

        getContentPane().add(convert);

        repair.setText("Repair");
        repair.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                repairActionPerformed(evt);
            }
        });

        getContentPane().add(repair);

        jButton1.setText("locktest");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton1);

        pack();
    }//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Choose DB");
        chooser.setCurrentDirectory( new File(".") );
        chooser.addChoosableFileFilter( new MDB.DBFilter() );
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal != JFileChooser.APPROVE_OPTION)
            return;
        
        File sfile = chooser.getSelectedFile();
        
        
        MDB db;
        try
        {
            
            
            db = new MDB(sfile.getAbsolutePath(),MDB.READ_WRITE, true);
            JOptionPane.showMessageDialog(this, "Database is now open in shared mode" );
            db.getReadLock();
            JOptionPane.showMessageDialog(this, "Database is now locked for shared Read" );
            db.releaseLock();
            db.getWriteLock();
            JOptionPane.showMessageDialog(this, "Database is now locked in exclusive write mode" );
            db.releaseLock();
            db.close();
            db = null;
        }
        catch ( Exception e )
        {
            errmsg(e);
            return;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void repairActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_repairActionPerformed
    {//GEN-HEADEREND:event_repairActionPerformed
        String s = "This option will read a database file and try to delete\n";
        s +=       "any bad rows. \n****** Please backup your original file ";
        s +=       "before doing this!!! ******\n";
        JOptionPane.showMessageDialog(null, s, "Warning",
        JOptionPane.WARNING_MESSAGE);JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory( new File(".") );
        chooser.addChoosableFileFilter( new MDB.DBFilter() );
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal != JFileChooser.APPROVE_OPTION)
            return;

        String file = chooser.getSelectedFile().getAbsolutePath();
        try{
            String res = MDB.repair( file, 0 );
            poptext( res, "Repair Output" );

        }
        catch( Exception e )
        {
            errmsg(e);
        }

    }//GEN-LAST:event_repairActionPerformed
        private void convertActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_convertActionPerformed
    {//GEN-HEADEREND:event_convertActionPerformed
        String s = "This option will read an SMDB or BeanDB database file and normalize\n";
        s +=       "All Date Strings to a common format. Please backup your original file\n";
        s +=       "before doing this!!!";
        JOptionPane.showMessageDialog(null, s, "Warning",
        JOptionPane.WARNING_MESSAGE);
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Select DB to convert");
        chooser.setCurrentDirectory( new File(".") );
        chooser.addChoosableFileFilter( new MDB.DBFilter() );
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal != JFileChooser.APPROVE_OPTION)
            return;
        
        SMDB db = null;
        String fname = chooser.getSelectedFile().getAbsolutePath();
        try
        {
            db = new SMDB(fname, MDB.READ_WRITE, false );
            System.out.println("Converting DB " + fname );
            
            // determine date fields
            Schema sch = db.getSchema();
            ArrayList datefields = new ArrayList();
            for( int fno = 1; fno <= sch.numCols(); fno++ )
            {
                String field = sch.getField(fno);
                String type = sch.getType(field);
                if( type.equals("Date") )
                    datefields.add(field);
            }
            
            if( datefields.size() == 0 )
            {
                System.out.println("No date fields - conversion not needed" );
                db.close();
                db = null;
                return;
            }
                 
            Collection keycol = db.getKeys();
            Iterator keyiter = keycol.iterator();
            
            while( keyiter.hasNext() )
            {
                Integer k = (Integer) keyiter.next();
                Row r = db.readRow(k.intValue());
                for( int j = 0; j < datefields.size(); j++ )
                {
                    String fld = (String)datefields.get(j);
                    r.normalize(false);
                    Date d = null;
                    try{
                        d = r.getDate(fld);
                    }
                    catch( Exception e )
                    {
                        System.out.println(e);
                        continue;
                    }
                    System.out.print(".");
                    r.normalize(true);
                    r.setField(fld, d );
                }
                db.updateRow(k.intValue(), r );

            }
            
            
        }
 
        catch( DBException me )
        {
            if( me.getRetCode() != DBException.RET_NOT_FOUND )
            {
                errmsg(me);
                return;
            }
        }
        catch( Exception e )
        {
            
            errmsg(e);
            return;
            
        }
        try{
            if( db != null )
        	db.setNormalize(true);
        }
        catch( Exception e ){ errmsg(e); }
        
        System.out.println("\nDone");
        if( db != null)
            db.close();
        db = null;
    }//GEN-LAST:event_convertActionPerformed
       
    
    private void unlockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unlockActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory( new File(".") );
        chooser.addChoosableFileFilter( new MDB.DBFilter() );
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal != JFileChooser.APPROVE_OPTION)
            return;
        
        String fname = chooser.getSelectedFile().getAbsolutePath();
        try
        {
            MDB db = new MDB(fname, MDB.ADMIN, false );
            db.set_lock( MDB.UNLOCKED );
            db.close();
            db = null;
        }
        catch( Exception e )
        {
            errmsg(e);
            return;
        }
        
    }//GEN-LAST:event_unlockActionPerformed
    
    private void lockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory( new File(".") );
        chooser.addChoosableFileFilter( new MDB.DBFilter() );
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal != JFileChooser.APPROVE_OPTION)
            return;
        
        String fname = chooser.getSelectedFile().getAbsolutePath();
        try
        {
            MDB db = new MDB(fname, MDB.ADMIN, false );
            db.set_lock( MDB.READ_WRITE );
            db.close();
            db = null;
        }
        catch( Exception e )
        {
            errmsg(e);
            return;
        }
        
    }//GEN-LAST:event_lockActionPerformed
    
    private void ViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory( new File(".") );
        chooser.addChoosableFileFilter( new MDB.DBFilter() );
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal != JFileChooser.APPROVE_OPTION)
            return;
        
        String file = chooser.getSelectedFile().getAbsolutePath();
        try
        {
            gengui g = new gengui(file);
            g.setVisible(true);
        }
        catch( DBException e )
        {
            errmsg(e);
            return;
        }
        
        
        
    }//GEN-LAST:event_ViewActionPerformed
    
    private void impActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Choose new DB");
        chooser.setCurrentDirectory( new File(".") );
        chooser.addChoosableFileFilter( new MDB.DBFilter() );
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal != JFileChooser.APPROVE_OPTION)
            return;
        
        File sfile = chooser.getSelectedFile();
        if( sfile.exists() )
        {
            errmsg(new Exception("Error: DB already exists"));
            return;
        }
        
        JFileChooser chooser2 = new JFileChooser();
        chooser2.setDialogTitle("Choose export file");
        chooser2.setCurrentDirectory( new File(".") );
        returnVal = chooser2.showOpenDialog(this);
        if(returnVal != JFileChooser.APPROVE_OPTION)
            return;
        
        File ofile = chooser2.getSelectedFile();
        if( !ofile.exists() )
        {
            errmsg(new Exception("Error: Export File not found"));
            return;
        }
        
        try
        { MDB.import_db( ofile, sfile ); }
        catch( DBException e )
        {
            errmsg( e );
            return;
        }
        
    }//GEN-LAST:event_impActionPerformed
    
    private void expActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Choose source DB");
        chooser.setCurrentDirectory( new File(".") );
        chooser.addChoosableFileFilter( new MDB.DBFilter() );
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal != JFileChooser.APPROVE_OPTION)
            return;
        
        File sfile = chooser.getSelectedFile();
        
        JFileChooser chooser2 = new JFileChooser();
        chooser2.setDialogTitle("Choose output file");
        chooser2.setCurrentDirectory( new File(".") );
        returnVal = chooser2.showOpenDialog(this);
        if(returnVal != JFileChooser.APPROVE_OPTION)
            return;
        
        File ofile = chooser2.getSelectedFile();
        
        MDB db;
        try
        {
            
            FileWriter fw = new FileWriter(ofile);
            
            db = new MDB(sfile.getAbsolutePath(),MDB.READ_ONLY, false);
            String s = db.passivate();
            fw.write(s + "\n" );
            fw.close();
            db.close();
            db = null;
        }
        catch ( Exception e )
        {
            errmsg(e);
            return;
        }
        
        
        
    }//GEN-LAST:event_expActionPerformed
    
    private void scanActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_scanActionPerformed
    {//GEN-HEADEREND:event_scanActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory( new File(".") );
        chooser.addChoosableFileFilter( new MDB.DBFilter() );
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal != JFileChooser.APPROVE_OPTION)
            return;
        
        String fname = chooser.getSelectedFile().getAbsolutePath();
        
        
        MDB m;
        try
        {
            m = new MDB(fname, MDB.READ_DIRTY, true );
            String out =  m.scan(true);
            
            poptext( out, "Scan Output" );
            
        }
        catch( Exception e )
        {
            errmsg(e);
            return;
        }
    }//GEN-LAST:event_scanActionPerformed
    private void poptext( String out, String title)
    {
        JFrame fr = new JFrame();
        fr.setTitle(title);
        JScrollPane sp = new JScrollPane();
        JTextArea tx = new JTextArea();
        sp.setViewportView(tx);
        fr.getContentPane().add(sp);
        tx.setText(out);
        fr.pack();
        fr.setVisible(true);
    }

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    public static void errmsg( Exception e )
    {
        Object[] options =
        { "OK", "Show Stack Trace" };
        int option = JOptionPane.showOptionDialog(null, e.toString(), "Error",
        JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE,
        null, options, options[0]);
        
        if( option == 1 )
        {
            ByteArrayOutputStream bao = new ByteArrayOutputStream();
            PrintStream ps = new PrintStream(bao);
            e.printStackTrace(ps);
            JOptionPane.showMessageDialog(null, bao.toString(), "Stack Trace",
            JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        new mdbtool().setVisible(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton View;
    private javax.swing.JButton convert;
    private javax.swing.JButton exp;
    private javax.swing.JButton imp;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton lock;

    private javax.swing.JButton repair;
    private javax.swing.JButton scan;
    private javax.swing.JToggleButton unlock;
    // End of variables declaration//GEN-END:variables
    
}
