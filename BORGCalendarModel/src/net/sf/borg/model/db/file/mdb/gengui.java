/*
This file is part of BORG.
 
    BORG is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
 
    BORG is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with BORG; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
Copyright 2003 by Mike Berger
 */
package net.sf.borg.model.db.file.mdb;

/*
 * gengui.java
 *
 * Created on August 3, 2001, 11:09 AM
 */


/**
 *
 * @author  MBERGER
 * @version
 */
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.Collection;
import java.util.Iterator;

import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;

import net.sf.borg.common.ui.TableSorter;
import net.sf.borg.model.db.DBException;


class gengui extends javax.swing.JFrame
{

    private SMDB db;
    private int numcols;
    /** Creates new form gengui */
    public gengui(String file) throws DBException
    {
        try
        {
            
            
            db = new SMDB( file, MDB.READ_WRITE, false );
            Schema sch = db.getSchema();
            
            initComponents();
            
            String tx = "";
            
            String opts = db.optString();
            if( opts != null )
                tx += "\nOptions: " + opts;
            
            //jTextArea1.setText(tx);
            numcols = sch.numCols();
            String colhdr[] = new String[numcols+2];
            colhdr[0] = "Key";
            colhdr[1] = "User Flags";
            
            final Class types[] = new Class[numcols+2];
            types[0] = java.lang.Integer.class;
            types[1] = java.lang.Integer.class;
            for( int i = 2; i < numcols+2; i++ )
            {
                colhdr[i] = sch.getField(i-1);
                String type = sch.getType(colhdr[i]);
                
                if( type.equals("Integer"))
                    types[i] = java.lang.Integer.class;
                else if( type.equals("Date"))
                    types[i] = java.util.Date.class;
                else if( type.equals("String"))
                    types[i] = java.lang.String.class;
                else if( type.equals("StringVector"))
                    types[i] = java.util.Vector.class;
                else
                    types[i] = java.lang.String.class;
            }
            
            jTable1.setModel(new TableSorter( colhdr, types ));
            
            // jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            TableSorter tm = (TableSorter) jTable1.getModel();
            tm.addMouseListenerToHeaderInTable(jTable1);
            
            refresh();
            
        }
        catch( DBException e )
        {
            if( e.getRetCode() != DBException.RET_NOT_FOUND )
            {
                throw e;
                
            }
        }
        catch( Exception me )
        {
            throw new DBException(me.toString(),DBException.RET_FATAL);
        }
        
        pack();
    }
    
    public void refresh() throws DBException,Exception
    {
        deleteAll();
        
        Collection keycol = db.getKeys();
        Iterator keyiter = keycol.iterator();
        
        while( keyiter.hasNext() )           
        {
            Integer key = (Integer) keyiter.next();
            int k = key.intValue();
            Row sr = db.readRow(k);
            
            Object row[] = new Object[numcols+2];
            row[0] = new Integer(k);
            row[1] = new Integer(sr.getFlags());
            for( int i = 2; i < numcols + 2; i++ )
            {
                row[i] = sr.getObj(i-1);
            }
            this.addRow(row);
        }
        
    }
    public void addRow( Object [] ro )
    {
        TableSorter tm =   (TableSorter)jTable1.getModel();
        
        tm.addRow(ro);
        tm.tableChanged(new TableModelEvent(tm));
    }
    
    public void deleteAll()
    {
        TableSorter tm = (TableSorter) jTable1.getModel();
        tm.setRowCount(0);
        tm.tableChanged(new TableModelEvent(tm));
    }
    
    public void resize()
    {
        int row = jTable1.getRowCount();
        jTable1.setPreferredSize(new java.awt.Dimension(1000, row*16));
        
    }
    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SMDB Editor");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(120, 96, 88));
        jScrollPane1.setViewport(jScrollPane1.getViewport());
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jTextArea1, gridBagConstraints);

        jMenu3.setText("Edit");
        jMenuItem3.setText("Delete Row");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });

        jMenu3.add(jMenuItem3);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

    }//GEN-END:initComponents
    
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem3ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem3ActionPerformed
        // get key
        int rows[] = jTable1.getSelectedRows();
        if( rows.length == 0 )
        {
            errmsg( new Exception( "Select a row first"));
            return;
        }
        TableSorter tm =   (TableSorter)jTable1.getModel();
        
        for( int i = 0; i < rows.length; i++ )
        {
            Integer ki = (Integer)tm.getValueAt( rows[i], 0 );
            int key = ki.intValue();
            // delete row
            try
            {
                db.delete(key);
            }
            catch( Exception e )
            {
                errmsg(e);
            }
        }
        
        try
        {
            refresh();
        }
        catch( DBException e )
        {
            if( e.getRetCode() != DBException.RET_NOT_FOUND )
            {
                errmsg(e);
                
            }
        }
        catch( Exception e )
        {
            errmsg(e);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        db.close();
    }//GEN-LAST:event_exitForm
    
    
    public static void errmsg( Exception e )
    {
        Object[] options =
        { "OK", "Show Stack Trace" };
        int option = JOptionPane.showOptionDialog(null, e.toString(), "Error",
        JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE,
        null, options, options[0]);
        
        if( option == 1 )
        {
            ByteArrayOutputStream bao = new ByteArrayOutputStream();
            PrintStream ps = new PrintStream(bao);
            e.printStackTrace(ps);
            JOptionPane.showMessageDialog(null, bao.toString(), "Stack Trace",
            JOptionPane.ERROR_MESSAGE);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    
    
}
