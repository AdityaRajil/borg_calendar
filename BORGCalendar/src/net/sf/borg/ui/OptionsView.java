/*
 This file is part of BORG.

 BORG is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 BORG is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with BORG; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 Copyright 2003 by Mike Berger
 */

package net.sf.borg.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TreeSet;

import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JRadioButton;
import javax.swing.JSeparator;
import javax.swing.JSpinner;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SpinnerDateModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.WindowConstants;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.border.BevelBorder;
import javax.swing.border.SoftBevelBorder;
import javax.swing.border.TitledBorder;

import net.sf.borg.common.EncryptionHelper;
import net.sf.borg.common.Errmsg;
import net.sf.borg.common.PrefName;
import net.sf.borg.common.Prefs;
import net.sf.borg.common.Resource;
import net.sf.borg.control.Borg;
import net.sf.borg.ui.popup.ReminderTimePanel;
import net.sf.borg.ui.util.GridBagConstraintsFactory;
import net.sf.borg.ui.util.JButtonKnowsBgColor;
import net.sf.borg.ui.util.NwFontChooserS;
import net.sf.borg.ui.util.StripedTable;

/**
 * UI for editing BORG options
 */
/*
 * THIS FILE HAS NOT YET BEEN FULLY CLEANED UP. OptionsView is the worst of the
 * atrocities generated by the netbeans visual editor and made worse by the
 * eclipse visual editor. There are so many fields and widgets that it has never
 * been worth while to completely untangle the mess. The hundreds of lines of
 * grid bag mess have been cleaned up. Many variables have been renamed to have
 * meaningful names.
 */
public class OptionsView extends View {

	private static final long serialVersionUID = 1L;

	private static OptionsView singleton = null;

	/**
	 * Prompt the user to choose a folder
	 * 
	 * @return the folder path or null
	 */
	public static String chooseDir() {

		String dbdir = null;
		while (true) {
			JFileChooser chooser = new JFileChooser();

			chooser.setCurrentDirectory(new File("."));
			chooser
					.setDialogTitle("Please choose directory for database files");
			chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

			int returnVal = chooser.showOpenDialog(null);
			if (returnVal != JFileChooser.APPROVE_OPTION) {
				return (null);
			}

			dbdir = chooser.getSelectedFile().getAbsolutePath();
			File dir = new File(dbdir);
			String err = null;
			if (!dir.exists()) {
				err = "Database Directory [" + dbdir + "] does not exist";
			} else if (!dir.isDirectory()) {
				err = "Database Directory [" + dbdir + "] is not a directory";
			}

			if (err == null) {
				break;
			}

			Errmsg.notice(err);
		}

		return (dbdir);
	}

	
	/**
	 * open the options window but with a restricted view that only allows the
	 * db to be set
	 */
	public static void dbSelectOnly() {
		new OptionsView(true).setVisible(true);

	}

	/**
	 * get the options view singleton
	 * 
	 * @return the singleton
	 */
	public static OptionsView getReference() {
		if (singleton == null || !singleton.isShowing()) {
			singleton = new OptionsView(false);
		}
		return (singleton);
	}

	/**
	 * set a boolean preference from a checkbox
	 * 
	 * @param box
	 *            the checkbox
	 * @param pn
	 *            the preference name
	 */
	static private void setBooleanPref(JCheckBox box, PrefName pn) {
		if (box.isSelected()) {
			Prefs.putPref(pn, "true");
		} else {
			Prefs.putPref(pn, "false");
		}
	}

	/**
	 * set a check box from a boolean preference
	 * 
	 * @param box
	 *            the checkbox
	 * @param pn
	 *            the preference name
	 */
	static private void setCheckBox(JCheckBox box, PrefName pn) {
		String val = Prefs.getPref(pn);
		if (val.equals("true")) {
			box.setSelected(true);
		} else {
			box.setSelected(false);
		}
	}

	/*
	 * This list of fields are mostly UI components or other objects that hold
	 * an option value. Many are only used in one place and should not be class
	 * level, but THATS WHERE THE DAMN VISUAL CODE GENERATORS PUT THEM There
	 * need to be cleaned up at some point
	 */
	private JButton applyButton;

	private JTextField backupDir = new JTextField();
	private JTextField keyStoreText = new JTextField();

	/*
	 * the user color scheme buttons that let the user set colors
	 */
	private JButtonKnowsBgColor btn_ucs_birthdays;
	private JButtonKnowsBgColor btn_ucs_black;
	private JButtonKnowsBgColor btn_ucs_blue;
	private JButtonKnowsBgColor btn_ucs_default;
	private JButtonKnowsBgColor btn_ucs_green;
	private JButtonKnowsBgColor btn_ucs_halfday;
	private JButtonKnowsBgColor btn_ucs_holiday;
	private JButtonKnowsBgColor btn_ucs_holidays;
	private JButtonKnowsBgColor btn_ucs_red;
	private JButtonKnowsBgColor btn_ucs_stripe;
	private JButtonKnowsBgColor btn_ucs_tasks;
	private JButtonKnowsBgColor btn_ucs_today;
	private JButtonKnowsBgColor btn_ucs_vacation;
	private JButtonKnowsBgColor btn_ucs_weekday;
	private JButtonKnowsBgColor btn_ucs_weekend;
	private JButtonKnowsBgColor btn_ucs_white;

	private JCheckBox calShowSubtaskBox = new JCheckBox();

	private JCheckBox calShowTaskBox = new JCheckBox();

	private JCheckBox canadabox;

	private JCheckBox cb_ucs_marktodo;

	private JCheckBox cb_ucs_ontodo;

	private JSpinner checkfreq;

	private JCheckBox colorprint;

	private JCheckBox colorsortbox;

	private JTextField dbDirText;

	private JTextField dbHostText;

	private JTextField dbNameText;

	private JTextField dbPortText;

	private ButtonGroup dbTypeGroup;

	private JPanel dbTypePanel = null;

	private JTextField dbUserText;

	private JButton dismissButton;

	private JCheckBox dock = new JCheckBox();

	private JCheckBox doyBox = null;

	private JCheckBox emailbox;

	private JTextField emailtext;

	private JSpinner emailtimebox = null;

	private JCheckBox ganttShowSubtaskBox = new JCheckBox();

	private JCheckBox gradientApptBox = new JCheckBox();

	private JCheckBox hide_strike_box = new JCheckBox();

	private JCheckBox holiday1;

	private JRadioButton hsqldbButton;

	private JTextField hsqldbdir = new JTextField();

	private JPanel hsqldbPanel;

	private JCheckBox iso8601Box = new JCheckBox();

	private JRadioButton jdbcButton = null;

	private JPanel jdbcPanel = null;

	private JTextField jdbcText = null;

	private JPanel jPanelUCS = null;

	private JPasswordField jPasswordField1;

	private JSeparator jSeparator1;

	private JTabbedPane jTabbedPane1;

	private JComboBox lnfBox;

	private JComboBox localebox;

	private JCheckBox miltime;

	private JCheckBox mondaycb;

	private JButton monthFontButton = new JButton();

	private JRadioButton MySQLButton = null;

	private JPanel mysqlPanel;
	
	private JSpinner passwordTimeSpinner = null;

	private JCheckBox popenablebox;

	private JCheckBox privbox;

	private JCheckBox pubbox;

	private ReminderTimePanel remTimePanel = new ReminderTimePanel();

	private JPasswordField smpw = new JPasswordField();

	private JTextField smtpport = new JTextField();

	private JTextField smtptext;

	private JTextField socketPort = new JTextField();

	private JCheckBox soundbox;

	private JCheckBox splashbox;

	private JCheckBox stackbox;

	private JCheckBox taskAbbrevBox = new JCheckBox();

	private JPanel taskOptionPanel = null; // @jve:decl-index=0:visual-constraint="12,2528"

	private JTextField tf_ucs_marker;

	private JCheckBox tlsbox;

	private JPanel topPanel = null;

	private JCheckBox truncbox = null;

	private JCheckBox useBeep = null;

	private JTextField usertext = new JTextField();

	private JCheckBox useSysTray = new JCheckBox();

	private JButton weekFontButton = new JButton();

	private JComboBox wkendhr;

	private JComboBox wkstarthr;

	/**
	 * constructor
	 * 
	 * @param dbonly
	 *            if true, restrict changes to selecting the db only
	 */
	private OptionsView(boolean dbonly) {
		super();

		initComponents();

		if (dbonly) {
			setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		}

		/*
		 * the constructor loads all of the option widgets from the preference
		 * store
		 */

		// email time to day
		int emmins = Prefs.getIntPref(PrefName.EMAILTIME);
		Calendar cal = new GregorianCalendar(1980, 1, 1, 0, 0, 0);
		cal.add(Calendar.MINUTE, emmins);
		emailtimebox.setValue(cal.getTime());

		//
		// database type
		//
		String dbtype = Prefs.getPref(PrefName.DBTYPE);
		if (dbtype.equals("mysql")) {
			MySQLButton.setSelected(true);
		} else if (dbtype.equals("hsqldb")) {
			hsqldbButton.setSelected(true);
		} else {
			jdbcButton.setSelected(true);
		}
		// change to show the db panel that matches the db type
		dbTypeChange(dbtype);

		// more db options
		dbNameText.setText(Prefs.getPref(PrefName.DBNAME));
		dbPortText.setText(Prefs.getPref(PrefName.DBPORT));
		dbHostText.setText(Prefs.getPref(PrefName.DBHOST));
		dbUserText.setText(Prefs.getPref(PrefName.DBUSER));
		jPasswordField1.setText(Prefs.getPref(PrefName.DBPASS));
		jdbcText.setText(Prefs.getPref(PrefName.JDBCURL));
		hsqldbdir.setText(Prefs.getPref(PrefName.HSQLDBDIR));

		backupDir.setText(Prefs.getPref(PrefName.BACKUPDIR));
		keyStoreText.setText(Prefs.getPref(PrefName.KEYSTORE));

		if (dbonly) {
			// disable lots of non-db-related stuff
			// this is used only on start up when no db is set
			// and we need one set. at that time, no other options
			// really make sense
			jTabbedPane1.setEnabledAt(0, false);
			jTabbedPane1.setEnabledAt(1, false);
			jTabbedPane1.setEnabledAt(3, false);
			jTabbedPane1.setEnabledAt(4, false);
			jTabbedPane1.setEnabledAt(5, false);
			jTabbedPane1.setEnabledAt(6, false);
			jTabbedPane1.setEnabledAt(7, false);

			jTabbedPane1.setSelectedIndex(2);
			dismissButton.setEnabled(false);
			applyButton.setEnabled(false);

			return;

		}

		// set various simple boolean checkboxes
		setCheckBox(colorprint, PrefName.COLORPRINT);
		setCheckBox(pubbox, PrefName.SHOWPUBLIC);
		setCheckBox(privbox, PrefName.SHOWPRIVATE);
		setCheckBox(emailbox, PrefName.EMAILENABLED);
		setCheckBox(holiday1, PrefName.SHOWUSHOLIDAYS);
		setCheckBox(canadabox, PrefName.SHOWCANHOLIDAYS);
		setCheckBox(doyBox, PrefName.DAYOFYEAR);
		setCheckBox(colorsortbox, PrefName.COLORSORT);
		setCheckBox(miltime, PrefName.MILTIME);
		setCheckBox(splashbox, PrefName.SPLASH);
		setCheckBox(stackbox, PrefName.STACKTRACE);
		setCheckBox(popenablebox, PrefName.REMINDERS);
		setCheckBox(soundbox, PrefName.BEEPINGREMINDERS);
		setCheckBox(useBeep, PrefName.USESYSTEMBEEP);
		setCheckBox(truncbox, PrefName.TRUNCAPPT);
		setCheckBox(iso8601Box, PrefName.ISOWKNUMBER);
		setCheckBox(useSysTray, PrefName.USESYSTRAY);
		setCheckBox(taskAbbrevBox, PrefName.TASK_SHOW_ABBREV);
		setCheckBox(calShowTaskBox, PrefName.CAL_SHOW_TASKS);
		setCheckBox(calShowSubtaskBox, PrefName.CAL_SHOW_SUBTASKS);
		setCheckBox(ganttShowSubtaskBox, PrefName.GANTT_SHOW_SUBTASKS);
		setCheckBox(dock, PrefName.DOCKPANELS);
		setCheckBox(hide_strike_box, PrefName.HIDESTRIKETHROUGH);
		setCheckBox(tlsbox, PrefName.ENABLETLS);
		setCheckBox(gradientApptBox, PrefName.GRADIENT_APPTS);

		int socket = Prefs.getIntPref(PrefName.SOCKETPORT);
		socketPort.setText(Integer.toString(socket));

		// email server and address
		smtptext.setText(Prefs.getPref(PrefName.EMAILSERVER));
		smtpport.setText(Prefs.getPref(PrefName.EMAILPORT));
		emailtext.setText(Prefs.getPref(PrefName.EMAILADDR));
		usertext.setText(Prefs.getPref(PrefName.EMAILUSER));
		smpw.setText(Prefs.getPref(PrefName.EMAILPASS));

		// monday first day of week option
		int fdow = Prefs.getIntPref(PrefName.FIRSTDOW);
		if (fdow == Calendar.MONDAY) {
			mondaycb.setSelected(true);
		} else {
			mondaycb.setSelected(false);
		}

		// add installed look and feels to lnfBox
		lnfBox.removeAllItems();
		Collection<String> lnfs = new TreeSet<String>();
		String curlnf = Prefs.getPref(PrefName.LNF);

		// add installed JRE look and feels
		LookAndFeelInfo lnfinfo[] = UIManager.getInstalledLookAndFeels();
		for (int i = 0; i < lnfinfo.length; i++) {
			String name = lnfinfo[i].getClassName();
			lnfs.add(name);
		}

		// search for other well know ones and add if they are in the classpath
		try {
			Class.forName("com.jgoodies.looks.plastic.PlasticLookAndFeel");
			lnfs.add("com.jgoodies.looks.plastic.PlasticLookAndFeel");
		} catch (Exception e) {
		  // empty
		}
		try {
			Class.forName("com.jgoodies.looks.windows.WindowsLookAndFeel");
			lnfs.add("com.jgoodies.looks.windows.WindowsLookAndFeel");
		} catch (Exception e) {
		  // empty
		}
		try {
			Class.forName("com.jgoodies.looks.plastic.PlasticXPLookAndFeel");
			lnfs.add("com.jgoodies.looks.plastic.PlasticXPLookAndFeel");
		} catch (Exception e) {
		  // empty
		}
		try {
			Class.forName("com.jgoodies.looks.plastic.Plastic3DLookAndFeel");
			lnfs.add("com.jgoodies.looks.plastic.Plastic3DLookAndFeel");
		} catch (Exception e) {
		  // empty
		}
		try {
			Class.forName("com.incors.plaf.kunststoff.KunststoffLookAndFeel");
			lnfs.add("com.incors.plaf.kunststoff.KunststoffLookAndFeel");
		} catch (Exception e) {
		  // empty
		}
		try {
			Class
					.forName("de.javasoft.plaf.synthetica.SyntheticaStandardLookAndFeel");
			lnfs
					.add("de.javasoft.plaf.synthetica.SyntheticaStandardLookAndFeel");
		} catch (Exception e) {
		  // empty
		}

		// add the look and feel in the preference store
		lnfs.add(curlnf);

		// add to the combo box
		for (String lnf : lnfs) {
			lnfBox.addItem(lnf);
		}

		lnfBox.setSelectedItem(curlnf);
		lnfBox.setEditable(false);

		// start and end hour for the time grids
		String shr = Prefs.getPref(PrefName.WKSTARTHOUR);
		String ehr = Prefs.getPref(PrefName.WKENDHOUR);
		wkstarthr.setSelectedItem(shr);
		wkendhr.setSelectedItem(ehr);

		// add locales
		localebox.removeAllItems();
		Locale locs[] = Locale.getAvailableLocales();
		for (int i = 0; i < locs.length; i++) {
			localebox.addItem(locs[i].getDisplayName());
		}

		String currentlocale = Locale.getDefault().getDisplayName();
		localebox.setSelectedItem(currentlocale);

		int mins = Prefs.getIntPref(PrefName.REMINDERCHECKMINS);
		checkfreq.setValue(new Integer(mins));

		/*
		 * User Tunable Color Options
		 */
		setCheckBox(cb_ucs_ontodo, PrefName.UCS_ONTODO);
		setCheckBox(cb_ucs_marktodo, PrefName.UCS_MARKTODO);

		tf_ucs_marker.setText(Prefs.getPref(PrefName.UCS_MARKER));
		mins = Integer.parseInt(Prefs.getPref(PrefName.UCS_RED));
		btn_ucs_red.setColorProperty(new Color(mins));
		btn_ucs_red.setColorByProperty();
		mins = Integer.parseInt(Prefs.getPref(PrefName.UCS_BLUE));
		btn_ucs_blue.setColorProperty(new Color(mins));
		btn_ucs_blue.setColorByProperty();
		mins = Integer.parseInt(Prefs.getPref(PrefName.UCS_GREEN));
		btn_ucs_green.setColorProperty(new Color(mins));
		btn_ucs_green.setColorByProperty();
		mins = Integer.parseInt(Prefs.getPref(PrefName.UCS_BLACK));
		btn_ucs_black.setColorProperty(new Color(mins));
		btn_ucs_black.setColorByProperty();
		mins = Integer.parseInt(Prefs.getPref(PrefName.UCS_WHITE));
		btn_ucs_white.setColorProperty(new Color(mins));
		btn_ucs_white.setColorByProperty();

		mins = Integer.parseInt(Prefs.getPref(PrefName.UCS_NAVY));
		btn_ucs_tasks.setColorProperty(new Color(mins));
		btn_ucs_tasks.setColorByProperty();
		mins = Integer.parseInt(Prefs.getPref(PrefName.UCS_PURPLE));
		btn_ucs_holidays.setColorProperty(new Color(mins));
		btn_ucs_holidays.setColorByProperty();
		mins = Integer.parseInt(Prefs.getPref(PrefName.UCS_BRICK));
		btn_ucs_birthdays.setColorProperty(new Color(mins));
		btn_ucs_birthdays.setColorByProperty();

		mins = Integer.parseInt(Prefs.getPref(PrefName.UCS_DEFAULT));
		btn_ucs_default.setColorProperty(new Color(mins));
		btn_ucs_default.setColorByProperty();
		mins = Integer.parseInt(Prefs.getPref(PrefName.UCS_TODAY));
		btn_ucs_today.setColorProperty(new Color(mins));
		btn_ucs_today.setColorByProperty();
		mins = Integer.parseInt(Prefs.getPref(PrefName.UCS_HOLIDAY));
		btn_ucs_holiday.setColorProperty(new Color(mins));
		btn_ucs_holiday.setColorByProperty();
		mins = Integer.parseInt(Prefs.getPref(PrefName.UCS_HALFDAY));
		btn_ucs_halfday.setColorProperty(new Color(mins));
		btn_ucs_halfday.setColorByProperty();
		mins = Integer.parseInt(Prefs.getPref(PrefName.UCS_VACATION));
		btn_ucs_vacation.setColorProperty(new Color(mins));
		btn_ucs_vacation.setColorByProperty();
		mins = Integer.parseInt(Prefs.getPref(PrefName.UCS_WEEKEND));
		btn_ucs_weekend.setColorProperty(new Color(mins));
		btn_ucs_weekend.setColorByProperty();
		mins = Integer.parseInt(Prefs.getPref(PrefName.UCS_WEEKDAY));
		btn_ucs_weekday.setColorProperty(new Color(mins));
		btn_ucs_weekday.setColorByProperty();
		mins = Integer.parseInt(Prefs.getPref(PrefName.UCS_STRIPE));
		btn_ucs_stripe.setColorProperty(new Color(mins));
		btn_ucs_stripe.setColorByProperty();
		
		passwordTimeSpinner.setValue(new Integer(Prefs.getIntPref(PrefName.PASSWORD_TTL)));

		// automatically maintain the size and position of this view in
		// a preference
		manageMySize(PrefName.OPTVIEWSIZE);
	}

	/**
	 * save all preferences to the preference store based on the current UI
	 * values
	 */
	private void applyChanges() {

		// lots of boolean check boxes
		setBooleanPref(colorprint, PrefName.COLORPRINT);
		setBooleanPref(pubbox, PrefName.SHOWPUBLIC);
		setBooleanPref(privbox, PrefName.SHOWPRIVATE);
		setBooleanPref(emailbox, PrefName.EMAILENABLED);
		setBooleanPref(holiday1, PrefName.SHOWUSHOLIDAYS);
		setBooleanPref(canadabox, PrefName.SHOWCANHOLIDAYS);
		setBooleanPref(doyBox, PrefName.DAYOFYEAR);
		setBooleanPref(colorsortbox, PrefName.COLORSORT);
		setBooleanPref(miltime, PrefName.MILTIME);
		setBooleanPref(splashbox, PrefName.SPLASH);
		setBooleanPref(stackbox, PrefName.STACKTRACE);
		setBooleanPref(popenablebox, PrefName.REMINDERS);
		setBooleanPref(soundbox, PrefName.BEEPINGREMINDERS);
		setBooleanPref(useBeep, PrefName.USESYSTEMBEEP);
		setBooleanPref(truncbox, PrefName.TRUNCAPPT);
		setBooleanPref(iso8601Box, PrefName.ISOWKNUMBER);
		setBooleanPref(useSysTray, PrefName.USESYSTRAY);
		setBooleanPref(taskAbbrevBox, PrefName.TASK_SHOW_ABBREV);
		setBooleanPref(calShowTaskBox, PrefName.CAL_SHOW_TASKS);
		setBooleanPref(calShowSubtaskBox, PrefName.CAL_SHOW_SUBTASKS);
		setBooleanPref(ganttShowSubtaskBox, PrefName.GANTT_SHOW_SUBTASKS);
		setBooleanPref(dock, PrefName.DOCKPANELS);
		setBooleanPref(hide_strike_box, PrefName.HIDESTRIKETHROUGH);
		setBooleanPref(tlsbox, PrefName.ENABLETLS);
		setBooleanPref(gradientApptBox, PrefName.GRADIENT_APPTS);

		Prefs.putPref(PrefName.BACKUPDIR, backupDir.getText());
		Prefs.putPref(PrefName.KEYSTORE, keyStoreText.getText());

		// validate that socket is a number
		try {
			int socket = Integer.parseInt(socketPort.getText());
			Prefs.putPref(PrefName.SOCKETPORT, new Integer(socket));
		} catch (NumberFormatException e) {
			Errmsg.notice(Resource.getResourceString("socket_warn"));
			socketPort.setText("-1");
			Prefs.putPref(PrefName.SOCKETPORT, new Integer(-1));
			return;
		}

		Integer i = (Integer) checkfreq.getValue();
		int cur = Prefs.getIntPref(PrefName.REMINDERCHECKMINS);
		if (i.intValue() != cur) {
			// why does this not save a new pref if the value is the same?
			// I no longer remeber if this matters - will leave as is
			Prefs.putPref(PrefName.REMINDERCHECKMINS, i);
		}

		// first day of week - either monday or sunday
		if (mondaycb.isSelected()) {
			Prefs.putPref(PrefName.FIRSTDOW, new Integer(Calendar.MONDAY));
		} else {
			Prefs.putPref(PrefName.FIRSTDOW, new Integer(Calendar.SUNDAY));
		}

		Prefs.putPref(PrefName.WKENDHOUR, wkendhr.getSelectedItem());
		Prefs.putPref(PrefName.WKSTARTHOUR, wkstarthr.getSelectedItem());

		/**
		 * the User tunable color stuff
		 */
		setBooleanPref(cb_ucs_ontodo, PrefName.UCS_ONTODO);
		setBooleanPref(cb_ucs_marktodo, PrefName.UCS_MARKTODO);

		Prefs.putPref(PrefName.UCS_MARKER, tf_ucs_marker.getText());

		Integer ucsi = new Integer((btn_ucs_red.getColorProperty()).getRGB());
		Prefs.putPref(PrefName.UCS_RED, ucsi.toString());
		ucsi = new Integer((btn_ucs_blue.getColorProperty()).getRGB());
		Prefs.putPref(PrefName.UCS_BLUE, ucsi.toString());
		ucsi = new Integer((btn_ucs_green.getColorProperty()).getRGB());
		Prefs.putPref(PrefName.UCS_GREEN, ucsi.toString());
		ucsi = new Integer((btn_ucs_black.getColorProperty()).getRGB());
		Prefs.putPref(PrefName.UCS_BLACK, ucsi.toString());
		ucsi = new Integer((btn_ucs_white.getColorProperty()).getRGB());
		Prefs.putPref(PrefName.UCS_WHITE, ucsi.toString());

		ucsi = new Integer((btn_ucs_tasks.getColorProperty()).getRGB());
		Prefs.putPref(PrefName.UCS_NAVY, ucsi.toString());
		ucsi = new Integer((btn_ucs_holidays.getColorProperty()).getRGB());
		Prefs.putPref(PrefName.UCS_PURPLE, ucsi.toString());
		ucsi = new Integer((btn_ucs_birthdays.getColorProperty()).getRGB());
		Prefs.putPref(PrefName.UCS_BRICK, ucsi.toString());

		ucsi = new Integer((btn_ucs_default.getColorProperty()).getRGB());
		Prefs.putPref(PrefName.UCS_DEFAULT, ucsi.toString());
		ucsi = new Integer((btn_ucs_holiday.getColorProperty()).getRGB());
		Prefs.putPref(PrefName.UCS_HOLIDAY, ucsi.toString());
		ucsi = new Integer((btn_ucs_halfday.getColorProperty()).getRGB());
		Prefs.putPref(PrefName.UCS_HALFDAY, ucsi.toString());
		ucsi = new Integer((btn_ucs_vacation.getColorProperty()).getRGB());
		Prefs.putPref(PrefName.UCS_VACATION, ucsi.toString());
		ucsi = new Integer((btn_ucs_today.getColorProperty()).getRGB());
		Prefs.putPref(PrefName.UCS_TODAY, ucsi.toString());
		ucsi = new Integer((btn_ucs_weekend.getColorProperty()).getRGB());
		Prefs.putPref(PrefName.UCS_WEEKEND, ucsi.toString());
		ucsi = new Integer((btn_ucs_weekday.getColorProperty()).getRGB());
		Prefs.putPref(PrefName.UCS_WEEKDAY, ucsi.toString());
		ucsi = new Integer((btn_ucs_stripe.getColorProperty()).getRGB());
		Prefs.putPref(PrefName.UCS_STRIPE, ucsi.toString());
		StripedTable.setStripeColor(new Color(ucsi.intValue()));

		// only save email options if email is enabled
		if (emailbox.isSelected()) {
			Prefs.putPref(PrefName.EMAILSERVER, smtptext.getText());
			Prefs.putPref(PrefName.EMAILPORT, smtpport.getText());
			Prefs.putPref(PrefName.EMAILADDR, emailtext.getText());
			Prefs.putPref(PrefName.EMAILUSER, usertext.getText());
			Prefs.putPref(PrefName.EMAILPASS, new String(smpw.getPassword()));

		}

		// locale
		Locale locs[] = Locale.getAvailableLocales();
		String choice = (String) localebox.getSelectedItem();
		for (int ii = 0; ii < locs.length; ii++) {
			if (choice.equals(locs[ii].getDisplayName())) {
				Prefs.putPref(PrefName.COUNTRY, locs[ii].getCountry());
				Prefs.putPref(PrefName.LANGUAGE, locs[ii].getLanguage());
			}
		}

		// look and feel
		// we no longer restart automatically or attempt to update the lnf
		// while running
		String newlnf = (String) lnfBox.getSelectedItem();
		String oldlnf = Prefs.getPref(PrefName.LNF);
		if (!newlnf.equals(oldlnf)) {
			Errmsg.notice(Resource.getResourceString("lfrestart"));
			Prefs.putPref(PrefName.LNF, newlnf);
		}

		Date d = (Date) emailtimebox.getValue();
		Calendar cal = new GregorianCalendar();
		cal.setTime(d);
		int hour = cal.get(Calendar.HOUR_OF_DAY);
		int min = cal.get(Calendar.MINUTE);
		Prefs.putPref(PrefName.EMAILTIME, new Integer(hour * 60 + min));
		remTimePanel.setTimes();
		
		Prefs.putPref(PrefName.PASSWORD_TTL, passwordTimeSpinner.getValue());

		// notify all parts of borg that have registered to know about
		// options changes
		Prefs.notifyListeners();

	}

	/**
	 * change the database settings - will update the settings and then restart
	 * the program
	 */
	private void chgdbActionPerformed() {
		int ret = JOptionPane.showConfirmDialog(null, Resource
				.getResourceString("Really_change_the_database?"), Resource
				.getResourceString("Confirm_DB_Change"),
				JOptionPane.YES_NO_OPTION);
		if (ret == JOptionPane.YES_OPTION) {

			String hh = hsqldbdir.getText();
			Prefs.putPref(PrefName.HSQLDBDIR, hh);

			if (MySQLButton.isSelected()) {
				Prefs.putPref(PrefName.DBTYPE, "mysql");
			} else if (hsqldbButton.isSelected()) {
				Prefs.putPref(PrefName.DBTYPE, "hsqldb");
			} else {
				Prefs.putPref(PrefName.DBTYPE, "jdbc");
			}
			Prefs.putPref(PrefName.DBNAME, dbNameText.getText());
			Prefs.putPref(PrefName.DBPORT, dbPortText.getText());
			Prefs.putPref(PrefName.DBHOST, dbHostText.getText());
			Prefs.putPref(PrefName.DBUSER, dbUserText.getText());
			Prefs.putPref(PrefName.DBPASS, new String(jPasswordField1
					.getPassword()));
			Prefs.putPref(PrefName.JDBCURL, jdbcText.getText());

			// restart the program
			Borg.getReference().restart();

			this.dispose();
		}
	}

	/**
	 * show the db settings panel that corresponds to the chosen db type and
	 * hide the other panels
	 * 
	 * @param type
	 *            db type
	 */
	private void dbTypeChange(String type) {
		if (type.equals("mysql")) {
			mysqlPanel.setVisible(true);
			hsqldbPanel.setVisible(false);
			jdbcPanel.setVisible(false);
		} else if (type.equals("hsqldb")) {
			mysqlPanel.setVisible(false);
			hsqldbPanel.setVisible(true);
			jdbcPanel.setVisible(false);
		} else {
			mysqlPanel.setVisible(false);
			hsqldbPanel.setVisible(false);
			jdbcPanel.setVisible(true);
		}
	}

	/**
	 * destroy this view
	 */
	@Override
	public void destroy() {
		this.dispose();
	}

	/**
	 * bring up a font chooser UI and let the user change a font
	 * 
	 * @param fontname
	 *            the preference name associated with the font
	 */
	private void fontActionPerformed(PrefName fontname) {

		// get font from pref name
		Font pf = Font.decode(Prefs.getPref(fontname));

		// choose a new font
		Font f = NwFontChooserS.showDialog(null, null, pf);
		if (f == null) {
			return;
		}

		// get the font name and store
		String s = NwFontChooserS.fontString(f);
		Prefs.putPref(fontname, s);

		// if the default font is changing then try to update the entire UI
		// will not likely be pretty
		if (fontname == PrefName.DEFFONT) {
			NwFontChooserS.setDefaultFont(f);
			SwingUtilities.updateComponentTreeUI(this);
		}

		// notify listeners - the font change takes place immediately
		// the apply button is not involved
		Prefs.notifyListeners();

	}

	/**
	 * create the appearance panel
	 * 
	 * @return the appearance panel
	 */
	private JPanel getAppearancePanel() {
		JPanel appearancePanel = new JPanel();
		appearancePanel.setLayout(new java.awt.GridBagLayout());

		appearancePanel.setName(Resource.getResourceString("appearance"));
		ResourceHelper.setText(privbox, "Show_Private_Appointments");
		appearancePanel.add(privbox, GridBagConstraintsFactory.create(1, 1,
				GridBagConstraints.BOTH));

		ResourceHelper.setText(pubbox, "Show_Public_Appointments");
		appearancePanel.add(pubbox, GridBagConstraintsFactory.create(0, 1,
				GridBagConstraints.BOTH));

		JLabel jLabel4 = new JLabel();
		ResourceHelper.setText(jLabel4, "Look_and_Feel:");
		jLabel4.setLabelFor(lnfBox);
		appearancePanel.add(jLabel4, GridBagConstraintsFactory.create(0, 0,
				GridBagConstraints.BOTH));

		lnfBox.setEditable(true);
		lnfBox.setMaximumSize(new java.awt.Dimension(131, 24));
		lnfBox.setPreferredSize(new java.awt.Dimension(50, 24));
		lnfBox.setAutoscrolls(true);
		appearancePanel.add(lnfBox, GridBagConstraintsFactory.create(1, 0,
				GridBagConstraints.BOTH));

		ResourceHelper.setText(holiday1, "Show_U.S._Holidays");
		appearancePanel.add(holiday1, GridBagConstraintsFactory.create(0, 3,
				GridBagConstraints.BOTH));

		ResourceHelper.setText(mondaycb, "Week_Starts_with_Monday");
		appearancePanel.add(mondaycb, GridBagConstraintsFactory.create(1, 4,
				GridBagConstraints.BOTH));

		ResourceHelper.setText(miltime, "Use_24_hour_time_format");
		appearancePanel.add(miltime, GridBagConstraintsFactory.create(0, 4,
				GridBagConstraints.BOTH));

		JLabel jLabel5 = new JLabel();
		ResourceHelper.setText(jLabel5, "Week_View_Start_Hour:_");
		jLabel5.setLabelFor(wkstarthr);
		wkstarthr.setModel(new DefaultComboBoxModel(new String[] { "0", "1",
				"2", "3", "4", "5", "6", "7", "8", "9", "10", "11" }));
		appearancePanel.add(jLabel5, GridBagConstraintsFactory.create(0, 6,
				GridBagConstraints.BOTH));

		wkendhr.setModel(new DefaultComboBoxModel(new String[] { "12", "13",
				"14", "15", "16", "17", "18", "19", "20", "21", "22", "23",
				"24" }));
		appearancePanel.add(wkstarthr, GridBagConstraintsFactory.create(1, 6,
				GridBagConstraints.BOTH));

		JLabel jLabel6 = new JLabel();
		ResourceHelper.setText(jLabel6, "Week_View_End_Hour:_");
		jLabel6.setLabelFor(wkendhr);
		appearancePanel.add(wkendhr, GridBagConstraintsFactory.create(1, 7,
				GridBagConstraints.BOTH));
		appearancePanel.add(jLabel6, GridBagConstraintsFactory.create(0, 7,
				GridBagConstraints.BOTH));

		ResourceHelper.setText(canadabox, "Show_Canadian_Holidays");
		appearancePanel.add(canadabox, GridBagConstraintsFactory.create(1, 3,
				GridBagConstraints.BOTH));

		JLabel jLabel8 = new JLabel();
		ResourceHelper.setText(jLabel8, "locale");
		jLabel8.setLabelFor(localebox);
		appearancePanel.add(jLabel8, GridBagConstraintsFactory.create(0, 11,
				GridBagConstraints.BOTH));

		appearancePanel.add(localebox, GridBagConstraintsFactory.create(1, 11,
				GridBagConstraints.BOTH));

		hide_strike_box.setText(Resource.getResourceString("hide_strike"));
		appearancePanel.add(hide_strike_box, GridBagConstraintsFactory.create(
				0, 2, GridBagConstraints.BOTH));

		ResourceHelper.setText(iso8601Box, "ISO_week_number");
		appearancePanel.add(iso8601Box, GridBagConstraintsFactory.create(1, 8,
				GridBagConstraints.BOTH, 1.0, 0.0));

		ResourceHelper.setText(dock, "dock_option");
		appearancePanel.add(dock, GridBagConstraintsFactory.create(0, 8,
				GridBagConstraints.BOTH));

		ResourceHelper.setText(colorsortbox, "colorsort");
		appearancePanel.add(colorsortbox, GridBagConstraintsFactory.create(0,
				5, GridBagConstraints.BOTH));

		doyBox = new JCheckBox();
		ResourceHelper.setText(doyBox, "showdoy");
		appearancePanel.add(doyBox, GridBagConstraintsFactory.create(1, 5,
				GridBagConstraints.BOTH));

		truncbox = new JCheckBox();
		ResourceHelper.setText(truncbox, "truncate_appts");
		appearancePanel.add(truncbox, GridBagConstraintsFactory.create(1, 2,
				GridBagConstraints.BOTH));

		return appearancePanel;
	}

	/**
	 * get the database panel
	 * 
	 * @return the database panel
	 */
	private JPanel getDBPanel() {

		JPanel dbPanel = new JPanel();

		dbPanel = new JPanel();
		dbPanel.setLayout(new GridBagLayout());

		GridBagConstraints gbcm = GridBagConstraintsFactory.create(0, 1,
				GridBagConstraints.BOTH, 1.0, 1.0);
		gbcm.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		dbPanel.add(getMysqlPanel(), gbcm);
		dbPanel.add(getDbTypePanel(), GridBagConstraintsFactory.create(0, 0,
				GridBagConstraints.BOTH));

		GridBagConstraints gridBagConstraints5 = GridBagConstraintsFactory
				.create(0, 6);
		gridBagConstraints5.weightx = 1.0;
		gridBagConstraints5.anchor = GridBagConstraints.CENTER;
		JButton chgdb = new JButton();
		dbPanel.add(chgdb, gridBagConstraints5);
		chgdb.setForeground(new java.awt.Color(255, 0, 51));
		chgdb.setIcon(new ImageIcon(getClass().getResource(
				"/resource/Refresh16.gif")));
		ResourceHelper.setText(chgdb, "Apply_DB_Change");
		chgdb.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				chgdbActionPerformed();
			}
		});

		JButton help = new JButton();
		GridBagConstraints gridBagConstraintsh = GridBagConstraintsFactory
				.create(1, 6);
		gridBagConstraintsh.weightx = 1.0;
		gridBagConstraintsh.anchor = GridBagConstraints.CENTER;
		dbPanel.add(help, gridBagConstraintsh);
		help.setForeground(new java.awt.Color(255, 0, 51));
		help.setIcon(new ImageIcon(getClass().getResource(
				"/resource/Help16.gif")));
		ResourceHelper.setText(help, "Help");

		help.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				try {
					HelpLauncher.launchHelp();
				} catch (Exception e) {
					Errmsg.errmsg(e);
				}
			}
		});

		GridBagConstraints gridBagConstraints6h = GridBagConstraintsFactory
				.create(0, 4, GridBagConstraints.BOTH, 1.0, 1.0);
		gridBagConstraints6h.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		dbPanel.add(getHSQLDBPanel(), gridBagConstraints6h);

		GridBagConstraints gridBagConstraints7h = GridBagConstraintsFactory
				.create(0, 5, GridBagConstraints.BOTH, 1.0, 1.0);
		gridBagConstraints7h.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		dbPanel.add(getJdbcPanel(), gridBagConstraints7h);

		return dbPanel;
	}

	/**
	 * get the database type button panel
	 * 
	 * @return the database type button panel
	 */
	private JPanel getDbTypePanel() {
		if (dbTypePanel == null) {
			FlowLayout flowLayout = new FlowLayout();
			flowLayout.setAlignment(java.awt.FlowLayout.LEFT);
			flowLayout.setHgap(40);
			dbTypePanel = new JPanel();
			dbTypePanel.setLayout(flowLayout);

			hsqldbButton = new JRadioButton();
			hsqldbButton.setActionCommand("hsqldb");
			ResourceHelper.setText(hsqldbButton, "hsqldb");
			hsqldbButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					dbTypeChange(e.getActionCommand());
				}
			});
			dbTypePanel.add(hsqldbButton, null);

			MySQLButton = new JRadioButton();
			MySQLButton.setActionCommand("mysql");
			MySQLButton.setText("MySQL");
			MySQLButton.setMnemonic(KeyEvent.VK_M);
			MySQLButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					dbTypeChange(e.getActionCommand());
				}
			});
			dbTypePanel.add(MySQLButton, null);

			jdbcButton = new JRadioButton();
			jdbcButton.setActionCommand("jdbc");
			ResourceHelper.setText(jdbcButton, "jdbc");
			jdbcButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					dbTypeChange(e.getActionCommand());
				}
			});
			dbTypePanel.add(jdbcButton, null);

			dbTypeGroup = new ButtonGroup();
			dbTypeGroup.add(hsqldbButton);
			dbTypeGroup.add(MySQLButton);
			dbTypeGroup.add(jdbcButton);

		}
		return dbTypePanel;
	}

	/**
	 * get the email options panel
	 * 
	 * @return the email options panel
	 */
	private JPanel getEmailPanel() {
		JPanel emailPanel = new JPanel();
		emailPanel.setLayout(new java.awt.GridBagLayout());

		JLabel jLabel1 = new JLabel();
		ResourceHelper.setText(jLabel1, "SMTP_Server");
		emailPanel.add(jLabel1, GridBagConstraintsFactory.create(0, 1,
				GridBagConstraints.BOTH));
		jLabel1.setLabelFor(smtptext);

		smtptext.setColumns(30);
		emailPanel.add(smtptext, GridBagConstraintsFactory.create(1, 1,
				GridBagConstraints.BOTH, 1.0, 0.0));

		JLabel portLabel = new JLabel();
		ResourceHelper.setText(portLabel, "SMTP_Port");
		emailPanel.add(portLabel, GridBagConstraintsFactory.create(0, 2,
				GridBagConstraints.BOTH));
		jLabel1.setLabelFor(smtpport);

		smtpport.setColumns(30);
		emailPanel.add(smtpport, GridBagConstraintsFactory.create(1, 2,
				GridBagConstraints.BOTH, 1.0, 0.0));

		JLabel userlabel = new JLabel();
		ResourceHelper.setText(userlabel, "SMTP_user");
		emailPanel.add(userlabel, GridBagConstraintsFactory.create(0, 3,
				GridBagConstraints.BOTH));
		userlabel.setLabelFor(usertext);

		emailPanel.add(usertext, GridBagConstraintsFactory.create(1, 3,
				GridBagConstraints.BOTH));

		JLabel passlabel = new JLabel();
		ResourceHelper.setText(passlabel, "SMTP_password");
		emailPanel.add(passlabel, GridBagConstraintsFactory.create(0, 4,
				GridBagConstraints.BOTH));
		passlabel.setLabelFor(smpw);

		emailPanel.add(smpw, GridBagConstraintsFactory.create(1, 4,
				GridBagConstraints.BOTH));

		JLabel jLabel2 = new JLabel();
		ResourceHelper.setText(jLabel2, "Your_Email_Address");
		emailPanel.add(jLabel2, GridBagConstraintsFactory.create(0, 5,
				GridBagConstraints.BOTH));
		jLabel2.setLabelFor(emailtext);

		emailtext.setColumns(30);
		emailPanel.add(emailtext, GridBagConstraintsFactory.create(1, 5,
				GridBagConstraints.BOTH, 1.0, 0.0));

		ResourceHelper.setText(emailbox, "Enable_Email");
		emailPanel.add(emailbox, GridBagConstraintsFactory.create(0, 0,
				GridBagConstraints.BOTH));

		JLabel remtimelabel = new JLabel();
		ResourceHelper.setText(remtimelabel, "reminder_time");
		remtimelabel.setLabelFor(emailtimebox);
		emailPanel.add(remtimelabel, GridBagConstraintsFactory.create(0, 6,
				GridBagConstraints.BOTH));

		emailtimebox = new JSpinner(new SpinnerDateModel());
		JSpinner.DateEditor de = new JSpinner.DateEditor(emailtimebox, "HH:mm");
		emailtimebox.setEditor(de);
		emailPanel.add(emailtimebox, GridBagConstraintsFactory.create(1, 6,
				GridBagConstraints.BOTH, 1.0, 0.0));

		tlsbox.setText(Resource.getResourceString("enable_tls"));
		emailPanel.add(tlsbox, GridBagConstraintsFactory.create(0, 7,
				GridBagConstraints.BOTH));

		return emailPanel;
	}

	/**
	 * get the font buttons panel
	 * 
	 * @return the font buttons panel
	 */
	private JPanel getFontPanel() {
		JPanel fontPanel = new JPanel();
		fontPanel.setLayout(new FlowLayout());

		JButton apptFontButton = new JButton();
		ResourceHelper.setText(apptFontButton, "set_appt_font");
		apptFontButton.setBorder(new SoftBevelBorder(BevelBorder.RAISED));
		apptFontButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				fontActionPerformed(PrefName.APPTFONT);
			}
		});
		fontPanel.add(apptFontButton);

		JButton defFontButton = new JButton();
		ResourceHelper.setText(defFontButton, "set_def_font");
		defFontButton.setBorder(new SoftBevelBorder(BevelBorder.RAISED));
		defFontButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				fontActionPerformed(PrefName.DEFFONT);
			}
		});
		fontPanel.add(defFontButton);

		JButton dayFontButton = new JButton();
		ResourceHelper.setText(dayFontButton, "dview_font");
		dayFontButton.setBorder(new SoftBevelBorder(BevelBorder.RAISED));
		dayFontButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				fontActionPerformed(PrefName.DAYVIEWFONT);
			}
		});
		fontPanel.add(dayFontButton);

		ResourceHelper.setText(weekFontButton, "wview_font");
		weekFontButton.setBorder(new SoftBevelBorder(BevelBorder.RAISED));
		weekFontButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				fontActionPerformed(PrefName.WEEKVIEWFONT);
			}
		});
		fontPanel.add(weekFontButton);

		ResourceHelper.setText(monthFontButton, "mview_font");
		monthFontButton.setBorder(new SoftBevelBorder(BevelBorder.RAISED));
		monthFontButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				fontActionPerformed(PrefName.MONTHVIEWFONT);
			}
		});
		fontPanel.add(monthFontButton);

		return fontPanel;
	}

	/**
	 * get the hsql options panel
	 * 
	 * @return the hsql options panel
	 */
	private JPanel getHSQLDBPanel() {
		hsqldbPanel = new JPanel();
		hsqldbPanel.setLayout(new java.awt.GridBagLayout());

		JLabel hs1 = new JLabel();
		hsqldbPanel.setBorder(new TitledBorder(Resource
				.getResourceString("hsqldbinfo")));
		ResourceHelper.setText(hs1, "DataBase_Directory");
		hs1.setLabelFor(dbDirText);
		hsqldbPanel.add(hs1, GridBagConstraintsFactory.create(0, 0,
				GridBagConstraints.BOTH));

		hsqldbPanel.add(hsqldbdir, GridBagConstraintsFactory.create(0, 1,
				GridBagConstraints.BOTH, 0.5, 0.0));

		JButton hsb1 = new JButton();
		ResourceHelper.setText(hsb1, "Browse");
		hsb1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				// browse for new database dir
				String dbdir = OptionsView.chooseDir();
				if (dbdir == null) {
					return;
				}

				// update text field - nothing else changes. DB change will take
				// effect
				// only on restart
				hsqldbdir.setText(dbdir);
			}
		});

		hsqldbPanel.add(hsb1, GridBagConstraintsFactory.create(1, 1,
				GridBagConstraints.BOTH));

		return hsqldbPanel;
	}

	/**
	 * get the generic jdbc options panel
	 * 
	 * @return the jdbc options panel
	 */
	private JPanel getJdbcPanel() {
		if (jdbcPanel == null) {

			JLabel enturlLabel = new JLabel();
			ResourceHelper.setText(enturlLabel, "enturl");
			jdbcText = new JTextField();
			enturlLabel.setLabelFor(jdbcText);
			enturlLabel.setHorizontalTextPosition(SwingConstants.LEFT);
			enturlLabel.setHorizontalAlignment(SwingConstants.LEFT);
			jdbcPanel = new JPanel();
			jdbcPanel.setLayout(new GridBagLayout());
			jdbcPanel.setBorder(BorderFactory.createTitledBorder(null, Resource
					.getResourceString("jdbc"),
					TitledBorder.DEFAULT_JUSTIFICATION,
					TitledBorder.DEFAULT_POSITION, null, null));
			jdbcPanel.add(enturlLabel, GridBagConstraintsFactory.create(0, 0,
					GridBagConstraints.BOTH));
			jdbcPanel.add(jdbcText, GridBagConstraintsFactory.create(0, 1,
					GridBagConstraints.BOTH, 1.0, 0.0));
		}
		return jdbcPanel;
	}

	/**
	 * get the user tunable color settings panel
	 * 
	 * @return the user tunable color settings panel
	 */
	private JPanel getJPanelUCS() {
		if (jPanelUCS == null) {
			jPanelUCS = new JPanel();
			jPanelUCS.setLayout(new GridLayout(10, 2));

			cb_ucs_ontodo = new JCheckBox();
			ResourceHelper.setText(cb_ucs_ontodo, "ucolortext1");
			cb_ucs_marktodo = new JCheckBox();
			ResourceHelper.setText(cb_ucs_marktodo, "ucolortext2");
			tf_ucs_marker = new JTextField("! "); //$NON-NLS-1$
			btn_ucs_red = new JButtonKnowsBgColor(Resource
					.getResourceString("ucolortext4"), Color.WHITE, false); //$NON-NLS-1$
			btn_ucs_blue = new JButtonKnowsBgColor(Resource
					.getResourceString("ucolortext5"), Color.WHITE, false); //$NON-NLS-1$
			btn_ucs_green = new JButtonKnowsBgColor(Resource
					.getResourceString("ucolortext6"), Color.WHITE, false); //$NON-NLS-1$
			btn_ucs_black = new JButtonKnowsBgColor(Resource
					.getResourceString("ucolortext7"), Color.WHITE, false); //$NON-NLS-1$
			btn_ucs_white = new JButtonKnowsBgColor(Resource
					.getResourceString("ucolortext8"), Color.WHITE, false); //$NON-NLS-1$
			btn_ucs_tasks = new JButtonKnowsBgColor(Resource
					.getResourceString("ucolortext9"), Color.WHITE, false); //$NON-NLS-1$
			btn_ucs_holidays = new JButtonKnowsBgColor(Resource
					.getResourceString("ucolortext10"), Color.WHITE, //$NON-NLS-1$
					false);
			btn_ucs_birthdays = new JButtonKnowsBgColor(Resource
					.getResourceString("ucolortext11"), Color.WHITE, //$NON-NLS-1$
					false);
			btn_ucs_default = new JButtonKnowsBgColor(Resource
					.getResourceString("ucolortext12"), Color.WHITE, true); //$NON-NLS-1$
			btn_ucs_holiday = new JButtonKnowsBgColor(Resource
					.getResourceString("ucolortext13"), Color.WHITE, true); //$NON-NLS-1$
			btn_ucs_halfday = new JButtonKnowsBgColor(Resource
					.getResourceString("ucolortext14"), Color.WHITE, true); //$NON-NLS-1$
			btn_ucs_vacation = new JButtonKnowsBgColor(Resource
					.getResourceString("ucolortext15"), Color.WHITE, //$NON-NLS-1$
					true);
			btn_ucs_today = new JButtonKnowsBgColor(Resource
					.getResourceString("ucolortext16"), Color.WHITE, true); //$NON-NLS-1$
			btn_ucs_weekend = new JButtonKnowsBgColor(Resource
					.getResourceString("ucolortext17"), Color.WHITE, true); //$NON-NLS-1$
			btn_ucs_weekday = new JButtonKnowsBgColor(Resource
					.getResourceString("ucolortext18"), Color.WHITE, true); //$NON-NLS-1$
			btn_ucs_stripe = new JButtonKnowsBgColor(Resource
					.getResourceString("stripecolor"), Color.WHITE, true);

			JButton btn_ucs_restore = new JButton(Resource
					.getResourceString("restore_defaults")); //$NON-NLS-1$

			btn_ucs_restore.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					btn_ucs_red.setColorProperty(new Color(
							((Integer) PrefName.UCS_RED.getDefault()).intValue()));
					btn_ucs_red.setColorByProperty();
					btn_ucs_blue.setColorProperty(new Color(
							((Integer) PrefName.UCS_BLUE.getDefault()).intValue()));
					btn_ucs_blue.setColorByProperty();
					btn_ucs_green.setColorProperty(new Color(
							((Integer) PrefName.UCS_GREEN.getDefault()).intValue()));
					btn_ucs_green.setColorByProperty();
					btn_ucs_black.setColorProperty(new Color(
							((Integer) PrefName.UCS_BLACK.getDefault()).intValue()));
					btn_ucs_black.setColorByProperty();
					btn_ucs_white.setColorProperty(new Color(
							((Integer) PrefName.UCS_WHITE.getDefault()).intValue()));
					btn_ucs_white.setColorByProperty();
					btn_ucs_tasks.setColorProperty(new Color(
							((Integer) PrefName.UCS_NAVY.getDefault()).intValue()));
					btn_ucs_tasks.setColorByProperty();
					btn_ucs_holidays.setColorProperty(new Color(
							((Integer) PrefName.UCS_PURPLE.getDefault()).intValue()));
					btn_ucs_holidays.setColorByProperty();
					btn_ucs_birthdays.setColorProperty(new Color(
							((Integer) PrefName.UCS_BRICK.getDefault()).intValue()));
					btn_ucs_birthdays.setColorByProperty();
					btn_ucs_default.setColorProperty(new Color(
							((Integer) PrefName.UCS_DEFAULT.getDefault()).intValue()));
					btn_ucs_default.setColorByProperty();
					btn_ucs_today.setColorProperty(new Color(
							((Integer) PrefName.UCS_TODAY.getDefault()).intValue()));
					btn_ucs_today.setColorByProperty();
					btn_ucs_holiday.setColorProperty(new Color(
							((Integer) PrefName.UCS_HOLIDAY.getDefault()).intValue()));
					btn_ucs_holiday.setColorByProperty();
					btn_ucs_vacation.setColorProperty(new Color(
							((Integer) PrefName.UCS_VACATION.getDefault()).intValue()));
					btn_ucs_vacation.setColorByProperty();
					btn_ucs_halfday.setColorProperty(new Color(
							((Integer) PrefName.UCS_HALFDAY.getDefault()).intValue()));
					btn_ucs_halfday.setColorByProperty();
					btn_ucs_weekend.setColorProperty(new Color(
							((Integer) PrefName.UCS_WEEKEND.getDefault()).intValue()));
					btn_ucs_weekend.setColorByProperty();
					btn_ucs_weekday.setColorProperty(new Color(
							((Integer) PrefName.UCS_WEEKDAY.getDefault()).intValue()));
					btn_ucs_weekday.setColorByProperty();
					btn_ucs_stripe.setColorProperty(new Color(
							((Integer) PrefName.UCS_STRIPE.getDefault()).intValue()));
					btn_ucs_stripe.setColorByProperty();
				}
			});

			jPanelUCS.add(btn_ucs_red);
			jPanelUCS.add(btn_ucs_default);
			jPanelUCS.add(btn_ucs_blue);
			jPanelUCS.add(btn_ucs_today);
			jPanelUCS.add(btn_ucs_green);
			jPanelUCS.add(btn_ucs_holiday);
			jPanelUCS.add(btn_ucs_black);
			jPanelUCS.add(btn_ucs_halfday);
			jPanelUCS.add(btn_ucs_white);
			jPanelUCS.add(btn_ucs_vacation);
			jPanelUCS.add(btn_ucs_tasks);
			jPanelUCS.add(btn_ucs_weekend);
			jPanelUCS.add(btn_ucs_holidays);
			jPanelUCS.add(btn_ucs_weekday);
			jPanelUCS.add(btn_ucs_birthdays);
			jPanelUCS.add(btn_ucs_stripe);
			jPanelUCS.add(btn_ucs_restore);
			jPanelUCS.add(cb_ucs_ontodo);

			JPanel njp = new JPanel();
			njp.setLayout(new BorderLayout());
			njp.add(cb_ucs_marktodo, BorderLayout.WEST);
			njp.add(tf_ucs_marker, BorderLayout.CENTER);
			getJPanelUCS().add(njp);

			gradientApptBox.setText(Resource
					.getResourceString("gradient_appts"));
			jPanelUCS.add(gradientApptBox);
		}
		return jPanelUCS;
	}

	/**
	 * get the miscellaneous options panel
	 * 
	 * @return the miscellaneous options panel
	 */
	private JPanel getMiscPanel() {
		JPanel miscPanel = new JPanel();

		miscPanel.setLayout(new java.awt.GridBagLayout());

		ResourceHelper.setText(splashbox, "splash");
		miscPanel.add(splashbox, GridBagConstraintsFactory.create(0, 0,
				GridBagConstraints.BOTH));

		ResourceHelper.setText(stackbox, "stackonerr");
		miscPanel.add(stackbox, GridBagConstraintsFactory.create(0, 40,
				GridBagConstraints.BOTH));

		JLabel sportlabel = new JLabel();
		ResourceHelper.setText(sportlabel, "socket_port");
		miscPanel.add(sportlabel, GridBagConstraintsFactory.create(0, 9,
				GridBagConstraints.BOTH));

		miscPanel.add(socketPort, GridBagConstraintsFactory.create(1, 9,
				GridBagConstraints.BOTH));

		useSysTray.setText(Resource.getResourceString("enable_systray"));
		miscPanel.add(useSysTray, GridBagConstraintsFactory.create(0, 10,
				GridBagConstraints.BOTH));

		JPanel backp = new JPanel();
		backp.setLayout(new GridBagLayout());

		backp
				.add(
						new JLabel(Resource.getResourceString("backup_dir")
								+ ": "), GridBagConstraintsFactory.create(0, 0,
								GridBagConstraints.NONE));

		backp.add(backupDir, GridBagConstraintsFactory.create(1, 0,
				GridBagConstraints.BOTH, 1.0, 0.0));

		JButton bb = new JButton();
		ResourceHelper.setText(bb, "Browse");
		bb.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				String dbdir = OptionsView.chooseDir();
				if (dbdir == null) {
					return;
				}

				backupDir.setText(dbdir);
			}
		});
		backp.add(bb, GridBagConstraintsFactory.create(2, 0,
				GridBagConstraints.NONE));

		GridBagConstraints gbc1 = GridBagConstraintsFactory.create(0, 11,
				GridBagConstraints.BOTH, 1.0, 0.0);
		gbc1.gridwidth = 2;
		miscPanel.add(backp, gbc1);

		ResourceHelper.setText(colorprint, "Print_In_Color?");
		miscPanel.add(colorprint, GridBagConstraintsFactory.create(0, 12,
				GridBagConstraints.BOTH));

		return miscPanel;
	}

	/**
	 * get the miscellaneous options panel
	 * 
	 * @return the miscellaneous options panel
	 */
	private JPanel getEncryptionPanel() {
		JPanel encPanel = new JPanel();

		encPanel.setLayout(new java.awt.GridBagLayout());

		JPanel ksPanel = new JPanel();
		ksPanel.setLayout(new GridBagLayout());

		ksPanel
				.add(
						new JLabel(Resource.getResourceString("KeyStore")
								+ ": "), GridBagConstraintsFactory.create(0, 0,
								GridBagConstraints.NONE));

		keyStoreText.setEditable(false);
		ksPanel.add(keyStoreText, GridBagConstraintsFactory.create(1, 0,
				GridBagConstraints.BOTH, 1.0, 0.0));

		JButton bb = new JButton();
		ResourceHelper.setText(bb, "Browse");
		bb.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				JFileChooser chooser = new JFileChooser();
	            
				chooser.setCurrentDirectory( new File(System.getProperty("user.home")) );
				chooser.setDialogTitle(Resource.getResourceString("SelectKeyStore"));
				chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
			            
				int returnVal = chooser.showOpenDialog(null);
				if(returnVal != JFileChooser.APPROVE_OPTION)
					return;
				
				File file = chooser.getSelectedFile();
				
				if( !file.canRead())
				{
					// create keystore
					JTextArea ta = new JTextArea();
					ta.setText(Resource.getResourceString("create_key_store"));
					ta.setEditable(false);
					ta.setRows(2);
					JPasswordField jpf = new JPasswordField();
					JPasswordField jpf2 = new JPasswordField();
					int result = JOptionPane
							.showConfirmDialog(null, new Object[] { ta, jpf, jpf2 },
									Resource.getResourceString("Password"), JOptionPane.OK_CANCEL_OPTION);
					if (result == JOptionPane.CANCEL_OPTION)
						return;
					
					if( !new String(jpf.getPassword()).equals(new String(jpf2.getPassword())))
					{
						Errmsg.notice("Passwords do not match");
						return;
					}
					
					try {
						EncryptionHelper.createStore(file.getAbsolutePath(), new String(jpf.getPassword()));
						EncryptionHelper.generateKey(file.getAbsolutePath(), new String(jpf.getPassword()), Prefs.getPref(PrefName.KEYALIAS));
					} catch (Exception e) {
						Errmsg.errmsg(e);
					}				

				}

				keyStoreText.setText(file.getAbsolutePath());
			}
		});
		ksPanel.add(bb, GridBagConstraintsFactory.create(2, 0,
				GridBagConstraints.NONE));

		GridBagConstraints gbc1 = GridBagConstraintsFactory.create(0, 0,
				GridBagConstraints.BOTH, 1.0, 0.0);
		gbc1.gridwidth = 2;
		encPanel.add(ksPanel, gbc1);
		
		encPanel.add(new JLabel(Resource.getResourceString("pw_time")),
				GridBagConstraintsFactory.create(0, 1, GridBagConstraints.BOTH));
		
		passwordTimeSpinner = new JSpinner(new SpinnerNumberModel(0,0,60*60*24*365,1));
		
		encPanel.add(passwordTimeSpinner, GridBagConstraintsFactory.create(1, 1, GridBagConstraints.BOTH));

		return encPanel;
	}

	/**
	 * get the mysql options panel
	 * 
	 * @return the mysql options panel
	 */
	private JPanel getMysqlPanel() {
		mysqlPanel = new JPanel();
		mysqlPanel.setLayout(new java.awt.GridBagLayout());

		mysqlPanel.setBorder(new TitledBorder(Resource
				.getResourceString("MySQLInfo")));

		JLabel jLabel7 = new JLabel();
		ResourceHelper.setText(jLabel7, "DatabaseName");
		jLabel7.setLabelFor(dbNameText);
		mysqlPanel.add(jLabel7, GridBagConstraintsFactory.create(0, 0,
				GridBagConstraints.BOTH));

		mysqlPanel.add(dbNameText, GridBagConstraintsFactory.create(1, 0,
				GridBagConstraints.BOTH));

		JLabel jLabel17 = new JLabel();
		ResourceHelper.setText(jLabel17, "hostname");
		jLabel17.setLabelFor(dbHostText);
		mysqlPanel.add(jLabel17, GridBagConstraintsFactory.create(0, 1,
				GridBagConstraints.BOTH));

		mysqlPanel.add(dbHostText, GridBagConstraintsFactory.create(1, 1,
				GridBagConstraints.BOTH, 1.0, 0.0));

		JLabel jLabel18 = new JLabel();
		ResourceHelper.setText(jLabel18, "port");
		jLabel18.setLabelFor(dbPortText);
		mysqlPanel.add(jLabel18, GridBagConstraintsFactory.create(0, 2,
				GridBagConstraints.BOTH));

		mysqlPanel.add(dbPortText, GridBagConstraintsFactory.create(1, 2,
				GridBagConstraints.BOTH, 1.0, 0.0));

		JLabel jLabel19 = new JLabel();
		ResourceHelper.setText(jLabel19, "User");
		jLabel19.setLabelFor(dbUserText);
		mysqlPanel.add(jLabel19, GridBagConstraintsFactory.create(0, 3,
				GridBagConstraints.BOTH));

		mysqlPanel.add(dbUserText, GridBagConstraintsFactory.create(1, 3,
				GridBagConstraints.BOTH, 1.0, 0.0));

		JLabel jLabel20 = new JLabel();
		ResourceHelper.setText(jLabel20, "Password");
		jLabel20.setLabelFor(jPasswordField1);
		mysqlPanel.add(jLabel20, GridBagConstraintsFactory.create(0, 4,
				GridBagConstraints.BOTH));

		mysqlPanel.add(jPasswordField1, GridBagConstraintsFactory.create(1, 4,
				GridBagConstraints.BOTH));

		return mysqlPanel;
	}

	/**
	 * get the reminder options panel
	 * 
	 * @return the reminder options panel
	 */
	private JPanel getReminderPanel() {

		JPanel reminderPanel = new JPanel();
		reminderPanel.setLayout(new java.awt.GridBagLayout());

		ResourceHelper.setText(popenablebox, "enable_popups");
		reminderPanel.add(popenablebox, GridBagConstraintsFactory.create(0, 0,
				GridBagConstraints.BOTH));

		ResourceHelper.setText(soundbox, "beeps");
		reminderPanel.add(soundbox, GridBagConstraintsFactory.create(0, 3,
				GridBagConstraints.BOTH));

		JLabel jLabel15 = new JLabel();
		jLabel15.setHorizontalAlignment(SwingConstants.TRAILING);
		ResourceHelper.setText(jLabel15, "min_between_chks");

		reminderPanel.add(jLabel15, GridBagConstraintsFactory.create(0, 1,
				GridBagConstraints.BOTH));

		checkfreq.setMinimumSize(new java.awt.Dimension(50, 20));
		reminderPanel.add(checkfreq, GridBagConstraintsFactory.create(1, 1,
				GridBagConstraints.BOTH, 1.0, 0.0));

		GridBagConstraints gridBagConstraints65 = GridBagConstraintsFactory
				.create(0, 2, GridBagConstraints.BOTH);
		gridBagConstraints65.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		reminderPanel.add(jSeparator1, gridBagConstraints65);

		JLabel jLabel16 = new JLabel();
		ResourceHelper.setText(jLabel16, "restart_req");
		reminderPanel.add(jLabel16, GridBagConstraintsFactory.create(2, 1,
				GridBagConstraints.BOTH));

		useBeep = new JCheckBox();
		ResourceHelper.setText(useBeep, "Use_system_beep");
		reminderPanel.add(useBeep, GridBagConstraintsFactory.create(0, 4));

		GridBagConstraints gridBagConstraints113 = GridBagConstraintsFactory
				.create(0, 5);
		gridBagConstraints113.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		gridBagConstraints113.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints113.insets = new java.awt.Insets(18, 18, 18, 18);
		reminderPanel.add(remTimePanel, gridBagConstraints113);

		return reminderPanel;
	}

	/**
	 * get the task options panel
	 * 
	 * @return the task options panel
	 */
	private JPanel getTaskOptionPanel() {
		if (taskOptionPanel == null) {
			GridBagConstraints gridBagConstraints20 = GridBagConstraintsFactory
					.create(0, 2, GridBagConstraints.NONE);
			gridBagConstraints20.anchor = GridBagConstraints.WEST;
			GridBagConstraints gridBagConstraints21 = GridBagConstraintsFactory
					.create(0, 3, GridBagConstraints.NONE);
			gridBagConstraints21.anchor = GridBagConstraints.WEST;
			GridBagConstraints gridBagConstraints19 = GridBagConstraintsFactory
					.create(0, 1, GridBagConstraints.NONE);
			gridBagConstraints19.anchor = GridBagConstraints.WEST;
			GridBagConstraints gridBagConstraints17 = GridBagConstraintsFactory
					.create(0, 0, GridBagConstraints.NONE);
			gridBagConstraints17.anchor = GridBagConstraints.WEST;

			taskOptionPanel = new JPanel();
			taskOptionPanel.setLayout(new GridBagLayout());
			taskOptionPanel.setSize(new Dimension(168, 159));
			taskOptionPanel.add(taskAbbrevBox, gridBagConstraints17);
			taskOptionPanel.add(calShowTaskBox, gridBagConstraints19);
			taskOptionPanel.add(calShowSubtaskBox, gridBagConstraints20);
			taskOptionPanel.add(ganttShowSubtaskBox, gridBagConstraints21);
			taskAbbrevBox.setText(Resource.getResourceString("task_abbrev"));
			calShowTaskBox.setText(Resource.getResourceString("calShowTask"));
			calShowSubtaskBox.setText(Resource
					.getResourceString("calShowSubtask"));
			ganttShowSubtaskBox.setText(Resource
					.getResourceString("ganttShowSubtask"));
		}
		return taskOptionPanel;
	}

	/**
	 * get the top level panel
	 * 
	 * @return the top level panel
	 */
	private JPanel getTopPanel() {
		if (topPanel == null) {

			topPanel = new JPanel();
			topPanel.setLayout(new GridBagLayout());

			topPanel.add(jTabbedPane1, GridBagConstraintsFactory.create(0, 0,
					GridBagConstraints.BOTH, 1.0, 1.0));

			JPanel applyDismissPanel = new JPanel();

			applyButton.setIcon(new ImageIcon(getClass().getResource(
					"/resource/Save16.gif")));
			ResourceHelper.setText(applyButton, "apply");
			applyButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					applyChanges();
				}
			});
			applyDismissPanel.add(applyButton, null);

			dismissButton.setIcon(new ImageIcon(getClass().getResource(
					"/resource/Stop16.gif")));
			ResourceHelper.setText(dismissButton, "Dismiss");
			dismissButton
					.addActionListener(new java.awt.event.ActionListener() {
						public void actionPerformed(
								java.awt.event.ActionEvent evt) {
							dispose();
						}
					});
			setDismissButton(dismissButton);
			applyDismissPanel.add(dismissButton, null);

			topPanel.add(applyDismissPanel, GridBagConstraintsFactory.create(0,
					1, GridBagConstraints.BOTH));
		}
		return topPanel;
	}

	private void initComponents() {

		/*
		 * The visual editors put this mess of initializers here and it's never
		 * been worth it to split them up and move them to where they should go
		 */
		calShowSubtaskBox.setName("calShowSubtaskBox");
		calShowSubtaskBox.setHorizontalAlignment(SwingConstants.LEFT);
		ganttShowSubtaskBox.setName("calShowSubtaskBox");
		ganttShowSubtaskBox.setHorizontalAlignment(SwingConstants.LEFT);
		calShowTaskBox.setName("calShowTaskBox");
		calShowTaskBox.setHorizontalAlignment(SwingConstants.LEFT);
		taskAbbrevBox.setName("taskAbbrevBox");
		taskAbbrevBox.setHorizontalAlignment(SwingConstants.LEFT);
		jTabbedPane1 = new JTabbedPane();
		privbox = new JCheckBox();
		pubbox = new JCheckBox();
		lnfBox = new JComboBox();
		holiday1 = new JCheckBox();
		mondaycb = new JCheckBox();
		miltime = new JCheckBox();
		wkstarthr = new JComboBox();
		wkendhr = new JComboBox();
		canadabox = new JCheckBox();
		localebox = new JComboBox();
		colorsortbox = new JCheckBox();
		dbNameText = new JTextField();
		dbHostText = new JTextField();
		dbPortText = new JTextField();
		dbUserText = new JTextField();
		jPasswordField1 = new JPasswordField();
		tlsbox = new JCheckBox();

		dbDirText = new JTextField();

		smtptext = new JTextField();
		emailtext = new JTextField();
		emailbox = new JCheckBox();
		colorprint = new JCheckBox();

		splashbox = new JCheckBox();
		stackbox = new JCheckBox();

		popenablebox = new JCheckBox();
		soundbox = new JCheckBox();
		checkfreq = new JSpinner();
		jSeparator1 = new JSeparator();

		dismissButton = new JButton();
		applyButton = new JButton();

		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		this.setTitle(Resource.getResourceString("Options"));
		addWindowListener(new java.awt.event.WindowAdapter() {
			@Override
			public void windowClosing(java.awt.event.WindowEvent evt) {
				dispose();
			}
		});

		ResourceHelper.addTab(jTabbedPane1, "appearance", getAppearancePanel());
		ResourceHelper.addTab(jTabbedPane1, "fonts", getFontPanel());
		ResourceHelper
				.addTab(jTabbedPane1, "DatabaseInformation", getDBPanel());
		ResourceHelper.addTab(jTabbedPane1, "EmailParameters", getEmailPanel());
		ResourceHelper.addTab(jTabbedPane1, "popup_reminders",
				getReminderPanel());

		ResourceHelper.addTab(jTabbedPane1, "misc", getMiscPanel());
		ResourceHelper.addTab(jTabbedPane1, "UserColorScheme", getJPanelUCS());
		ResourceHelper
				.addTab(jTabbedPane1, "taskOptions", getTaskOptionPanel());
		ResourceHelper.addTab(jTabbedPane1, "Encryption", getEncryptionPanel());

		this.setContentPane(getTopPanel());
		this.setSize(629, 493);

		pack();
	}

	@Override
	public void refresh() {
	  // empty
	}

}
